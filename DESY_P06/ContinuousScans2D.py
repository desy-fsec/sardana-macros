#!/bin/env python

import PyTango
import time
from sardana.macroserver.macro import macro, Type, ParamRepeat

__all__ = ["c2dscan_zebra"] 
 
global scan
 
class HookPars:
    pass

def hook_post_move(self, hook_pars):

    global scan
    scan = scan + 1
    self.info("Scan " + str(scan) + " of " + str(hook_pars.nscans))

    if scan%2==0:
        macro,pars = self.createMacro('cscan_zebra_xia',
                                      hook_pars.motor,
                                      hook_pars.final_pos,
                                      hook_pars.start_pos,
                                      hook_pars.nb_triggers, 
                                      hook_pars.trigger_interval)
    else:
        macro,pars = self.createMacro('cscan_zebra_xia',
                                      hook_pars.motor,
                                      hook_pars.start_pos,
                                      hook_pars.final_pos,
                                      hook_pars.nb_triggers, 
                                      hook_pars.trigger_interval)
    
    self.runMacro(macro)


@macro([
        ['motor',            Type.Motor,   None, 'Continuous scan motor'],
        ['start_pos',        Type.Float,   None, 'Continuous scan start position'],
        ['final_pos',        Type.Float,   None, 'Continuous scan final position'],
        ['nb_triggers',      Type.Integer, None, 'Nb of triggers generated by the zebra'],
        ['trigger_interval', Type.Float,   None, 'Time between consecutive triggers'],
        ['motor_ext',        Type.Motor,   None, 'External motor to move'],
        ['start_pos_ext',    Type.Float,   None, 'External scan start position'],
        ['final_pos_ext',    Type.Float,   None, 'External scan final position'],
        ['nb_points_ext',    Type.Integer, None, 'External number of points'],
        ['sample_time_ext',  Type.Float,   None, 'External sample time']
])

def c2dscan_zebra(self, motor, start_pos, final_pos, nb_triggers, trigger_interval, motor_ext, start_pos_ext, final_pos_ext, nb_points_ext, sample_time_ext):
    """ 2d scans with continuos scans """

    macro,pars = self.createMacro('ascan',
                                  motor_ext,
                                  start_pos_ext,
                                  final_pos_ext,
                                  nb_points_ext,
                                  sample_time_ext)
    
    # continuous scan als hook
    hook_pars = HookPars()
    hook_pars.motor = motor
    hook_pars.start_pos = start_pos
    hook_pars.final_pos = final_pos
    hook_pars.nb_triggers = nb_triggers
    hook_pars.trigger_interval = trigger_interval
    hook_pars.nscans = nb_points_ext + 1
        
    f = lambda : hook_post_move(self, hook_pars)
    macro.hooks = [
        (f, ["post-move"]),
        ]

    global scan
    scan = 0

    # Start external scan
    self.runMacro(macro)
