#!/bin/env python

"""pilc triggered continuous scan macros"""

__all__ = ["cscan_pilc_sis3820mcs", "cscan_pilc_sis3820mcs_senv"]

import PyTango
from sardana.macroserver.macro import *
from sardana.macroserver.macro import macro
import json
import time
import pytz
import datetime
import numpy


class cscan_pilc_sis3820mcs(Macro):
    """Perfoms a continuous scan with the pilc triggering the sis3820"""

    param_def = [
        ['motor',            Type.Motor,   None, 'Motor to move'],
        ['start_pos',        Type.Float,   None, 'Scan start position'],
        ['final_pos',        Type.Float,   None, 'Scan final position'],
        ['nb_triggers',      Type.Integer, None, 'Nb of triggers generated by the pilc'],
        ['trigger_interval', Type.Float,   None, 'Time or position units between consecutive triggers'],
        ['trigger_mode', Type.Integer,  3, 'Trigger mode: 1 pos, 2 time, 3 pos-time, 4 time-pos']
    ]

    result_def = [ [ "result", Type.String, None, "the cscan object" ]]

    def run(self, motor, start_pos, final_pos, nb_triggers, trigger_interval, trigger_mode):

        pilctg_device_name       = self.getEnv('PiLCTGDevice')
        self.output("Using PiLCTriggerGenerator device " + pilctg_device_name)
        mcs_device_name         = self.getEnv('MCSDevice')
        self.output("Using SIS3820MCS device " + mcs_device_name)
        
        #nexusconfig_device_name = self.getEnv('NeXusConfigDevice')   # class XMLConfigServer
        #nexuswriter_device_name = self.getEnv('NeXusWriterDevice') # class TangoDataServer
        
        pilctg_device      = PyTango.DeviceProxy(pilctg_device_name)
        mcs_device         = PyTango.DeviceProxy(mcs_device_name)
        
        motor_device       = PyTango.DeviceProxy(motor.getName())

        #self.nexusconfig_device = PyTango.DeviceProxy(nexusconfig_device_name)
        #self.nexuswriter_device = PyTango.DeviceProxy(nexuswriter_device_name)

        #self._openNxFile()
    
        # Set the PiLCTriggerGenerator device
        
	pilctg_device.TriggerMode = trigger_mode
        
	pilctg_device.TriggerPulseLength = 0.00001 # always smaller als trigger_interval

        if trigger_mode == 1:
            pilctg_device.PositionTriggerStart = start_pos
            pilctg_device.PositionTriggerStepSize = trigger_interval # position units between triggers
        elif trigger_mode == 2:
            pilctg_device.TimeTriggerStart = 0 # start triggering directly after Arm is set to 1
            pilctg_device.TimeTriggerStepSize = trigger_interval # time for counting
        elif trigger_mode == 3:
            pilctg_device.PositionTriggerStart = start_pos
            pilctg_device.TimeTriggerStepSize = trigger_interval # time for counting
        elif trigger_mode == 4:
            pilctg_device.TimeTriggerStart = 0
            pilctg_device.PositionTriggerStepSize = trigger_interval # position units between triggers
        else:
            self.warning("Wrong trigger mode. Exit")
            result = "Not run"
            return result

        pilctg_device.NbTriggers = nb_triggers
           
        # Set MCS
        
        mcs_device.NbAcquisitions = 0 # Continuous mode
        mcs_device.NbChannels     = 2 # Set two channels
        mcs_device.Preset = 1 # every trigger is used

        nb_mcs_taken_triggers = nb_triggers

        # Compute motor slewrate for the continuous scan

        #old_slewrate = motor_device.Velocity

        #scan_slewrate = abs(final_pos - start_pos)/(trigger_interval * (nb_triggers - 1))

        #motor_device.Velocity = scan_slewrate 

        # Move motor to start position minus an offset

        if start_pos < final_pos:
            pos_offset = 0.1
        else:
            pos_offset = -0.1

        motor_device.Position = start_pos - pos_offset
        
        while motor_device.State() == PyTango.DevState.MOVING:
            time.sleep(1)


        if trigger_mode == 2 or trigger_mode == 4:
            # Start motor movement to final position (the macro mv can not be used because it blocks)
            motor_device.Position = final_pos + pos_offset

            # Check when the motor is in the start_position for starting the trigger
        
            while(motor_device.Position < start_pos):
                time.sleep(0.001)

            # Store starttime
            
            amsterdam = pytz.timezone('Europe/Amsterdam')
            self.starttime = amsterdam.localize(datetime.datetime.now())
    
            # Clear and setup mcs

            mcs_device.ClearSetupMCS()        

            # Start pilc triggering
        
            pilctg_device.Arm = 1

        elif trigger_mode == 1 or trigger_mode == 3:
            # Store starttime
            
            amsterdam = pytz.timezone('Europe/Amsterdam')
            self.starttime = amsterdam.localize(datetime.datetime.now())
    
            # Clear and setup mcs

            mcs_device.ClearSetupMCS()        

            # Start pilc triggering
        
            pilctg_device.Arm = 1
            
            # Start motor movement to final position (the macro mv can not be used because it blocks)
            motor_device.Position = final_pos + pos_offset

            
            
        # Check when the triggering is done

        while pilctg_device.State() == PyTango.DevState.MOVING:
            time.sleep(1)

        # Read MCS

        mcs_device.ReadMCS()

        # Reset motor slewrate

        #motor_device.Velocity = old_slewrate

        # MCS Data

        nb_mcs_taken_triggers = mcs_device.AcquiredTriggers
        nb_mcs_channels = mcs_device.NbChannels
        mcs_data = mcs_device.CountsArray

        # PiLC Data

        pilcencoder_data = pilctg_device.EncoderData
	pilccounter_data = pilctg_device.CounterData
            
        # Open the nexus file for saving data

        #self._openNxFile()
        #self._openNxEntry(motor.getName(), start_pos, final_pos, nb_triggers, trigger_interval, nb_xia_channels)

        # Close NeXus file

        #self._closeNxEntry()
        #self._closeNxFile()

        result = "Esto es un test"
        return result 

    def _openNxFile(self):
        cscan_id = self.getEnv('CScanID')
        fileNameNx = self.getEnv('CScanFileName') + "_" + str(cscan_id) + ".h5"
        self.setEnv("CScanID", cscan_id + 1)
        self.nexuswriter_device.Init()
        self.nexuswriter_device.FileName = str(fileNameNx)
        self.nexuswriter_device.OpenFile()
        return 1

    def _openNxEntry(self, motor_name, start_pos, final_pos, nb_triggers, trigger_interval, xia_spec_length):
        
        self._sendGlobalDictionaryBefore(motor_name, start_pos, final_pos, nb_triggers, trigger_interval, xia_spec_length)
        
        self.nexusconfig_device.Open()
        cmps = self.nexusconfig_device.AvailableComponents()
        cmp_list = []
        if "zebra_init" not in cmps:
            self.output("_openNxEntry: zebra not in configuration server")
        else:
            cmp_list.append("zebra_init")

        # Add component for the XIA.

        if "xia_init" not in cmps:
           self.output("_openNxEntry: xia not in configuration server")
        else:
            cmp_list.append("xia_init")

        # Add the default component

        if "default" not in cmps:
            self.output("_openNxEntry: default not in configuration server")
        else:
            cmp_list.append("default")

        self.nexusconfig_device.CreateConfiguration(cmp_list)
        xmlconfig = self.nexusconfig_device.XMLString
        self.nexuswriter_device.XMLSettings = str(xmlconfig)
#        try:
#            self.nexuswriter_device.OpenEntry()
#        except:
#            pass


        try:
            self.nexuswriter_device.OpenEntryAsynch()
        except:
            pass
        
        while self.nexuswriter_device.State() == PyTango.DevState.RUNNING:
            time.sleep(0.01)

        return 1


    def _closeNxFile(self):
        self.nexuswriter_device.CloseFile()
        return 1


    def _closeNxEntry(self):
        self._sendGlobalDictionaryAfter()
        self.nexuswriter_device.CloseEntry()
        return 1

    def _sendGlobalDictionaryBefore(self, motor_name, start_pos, final_pos, nb_triggers, trigger_interval, xia_spec_length):
        hsh = {}
        hshSub = {}
        hshSub['motor_name'] = str(motor_name)
        hshSub['start_pos'] = start_pos
        hshSub['final_pos'] = final_pos
        hshSub['nb_triggers'] = nb_triggers
        hshSub['sample_time'] = trigger_interval
        fmt = '%Y-%m-%dT%H:%M:%S.%f%z'
        hshSub['start_time'] = str(self.starttime.strftime(fmt))
        hshSub['title'] = ""
        hshSub['sample_name'] = ""
        hshSub['chemical_formula'] = ""
        hshSub['beamtime_id'] = ""
#        hshSub["encoder_pos"] = [dt for dt in self.zebra_data]
        hsh['data'] = hshSub
        self._setParameter( hsh)
        return 1

    def _sendGlobalDictionaryAfter(self):
        hsh = {}
        hshSub = {}
        amsterdam = pytz.timezone('Europe/Amsterdam')
        fmt = '%Y-%m-%dT%H:%M:%S.%f%z'
        starttime = amsterdam.localize(datetime.datetime.now())
        hshSub['end_time'] = str(starttime.strftime(fmt))
        hshSub['comments'] = "some comment"
        hsh['data'] = hshSub
        self._setParameter( hsh)
        return 1

    def _setParameter(self, hsh):
        jsondata = json.dumps( hsh)
        self.nexuswriter_device.JSONRecord = str(jsondata)
        return 1

    def _sendRecordToNxWriter(self, hsh):
        mstr = json.dumps( hsh)
        self.nexuswriter_device.Record(mstr)
        return 1

class cscan_pilc_sis3820mcs_senv(Macro):
    """ Sets default environment variables """

    def run(self):
        self.setEnv("MCSDevice", "p09/mcs/d1.01")
        self.output("Setting MCSDevice to p09/mcs/d1.01")
        self.setEnv("PiLCTGDevice", "p09/pilctriggergenerator/haso107d1")
        self.output("Setting PiLCTGDevice to p09/pilctriggergenerator/haso107d1")
        #self.setEnv("CScanFileName", "/home/experiment/test_cscan_output")
        #self.output("Setting CScanFileName to /home/experiment/test_cscan_output")
        #self.setEnv("NeXusConfigDevice", "p06/nxsconfigserver/haspp06ctrl")
        #self.output("Setting NeXusConfigDevice to p06/nxsconfigserver/haspp06ctrl")
        #self.setEnv("NeXusWriterDevice", "p06/nxsdatawriter/haspp06ctrl")
        #self.output("Setting NeXusWriterDevice to p06/nxsdatawriter/haspp06ctrl")
        #self.setEnv("CScanID", 0)
        #self.output("Setting CScanID to 0")
