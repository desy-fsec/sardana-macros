from sardana.macroserver.macro import Macro, Type
import PyTango

class adlink_bl24_config(Macro):
    """
    This macro configures the adlink card to read the electrometer signal
    on trigger by the ni660x card.
    """
    param_def = [
                ['itime', Type.Float, None, 'Integration time.'],
                ['nTriggers', Type.Integer, None, 'nTriggers']]

    def run(self, itime, nTriggers):
        name = 'bl24/ct/adc-ibl2402-01'
        adlink = PyTango.DeviceProxy(name)
        if adlink.State() != PyTango.DevState.STANDBY:
            adlink.Stop()
        else:
            adlink.Init()
        
        adlink.TriggerSources = "ExtD:+"
        adlink.TriggerMode = 0 
        adlink.TriggerInfinite = 0

        adlink.SampleRate = 10000 # Hz
        adlink.ChannelSamplesPerTrigger = int(adlink.SampleRate * itime)
        adlink.NumOfTriggers= nTriggers


        

class adlink_bl24_start(Macro):
    """
    This macro start the adlink card to read the electrometer signal
    on trigger by the ni660x card.
    """
    param_def = []
    
    def run(self):
        name = 'bl24/ct/adc-ibl2402-01'
        adlink = PyTango.DeviceProxy(name)
        if adlink.State() != PyTango.DevState.STANDBY:
            adlink.Stop()
        else:
            adlink.Init()
            
            
        adlink.Start()
        
        
        
class adlink_bl24_show_results(Macro):
    """
    This macro start the adlink card to read the electrometer signal
    on trigger by the ni660x card.
    """
    param_def = []
    
    def run(self):
        name = 'bl24/ct/adc-ibl2402-01'
        adlink = PyTango.DeviceProxy(name)
        albaem = PyTango.DeviceProxy("BL24/DI/ALBAEM-06")
                 
            
        self.output("TriggerSources %s" %adlink.TriggerSources)
        self.output("TriggerMode %s"  %adlink.TriggerMode)
        self.output("TriggerInfinite %s" %adlink.TriggerInfinite)

        self.output("SampleRate %s" %adlink.SampleRate)
        self.output("ChannelSamplesPerTrigger %s" %adlink.ChannelSamplesPerTrigger)
        self.output("NumOfTriggers %s" %adlink.NumOfTriggers)
        
        
        self.output("C00_MeanLast %s" %adlink.C00_MeanLast)
        self.output("C00_MeanValues %s" %adlink.C00_MeanValues)
        
        
        self.output("ALBAEM STATE = %s" %albaem.read_attribute("range_ch3").quality)
        self.output("ALBAEM RANGE = %s" %albaem.range_ch3)
        self.output("ALBAEM I = %s" %albaem.I3)
        
class ni_bl24_connect(Macro):
    """
    Bypasses the trigger generated by channel 0 @ ni660x to channel 2 output.
    In this way, we obtain 2 synchronized triggers.
    """
    param_def = []

    def run(self):

        trigger = '/Dev1/PFI36'
        trigger2adlink = '/Dev1/PFI28'
	dev_name = 'bl24/io/ibl2402-dev1'

        dev = PyTango.DeviceProxy(dev_name)
        dev.ConnectTerms([trigger, trigger2adlink,
                           "DoNotInvertPolarity"])
        




